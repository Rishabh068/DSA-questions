class Solution {
public:
    int path(vector<vector<int>>& grid, int m, int n, int a, int b, vector<vector<int>> &dp)
    {
        if (a < 0 || a >= m || b < 0 || b >= n) {
            return 100000;
        }
        if (dp[a][b] != -1) {
            return dp[a][b];
        }
        if (a == m - 1 && b == n - 1) {
            dp[a][b] = grid[a][b];
        }
        else {
            int x = grid[a][b] + path(grid, m, n, a + 1, b, dp);
            int y = grid[a][b] + path(grid, m, n, a, b + 1, dp);
            int z = min(x, y);
            dp[a][b] = z;
        }
        return dp[a][b];
    }
    
    int minPathSum(vector<vector<int>>& grid) 
    {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        int lowestSum = path(grid, m, n, 0, 0, dp);
        return lowestSum;
    }
};
