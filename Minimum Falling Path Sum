class Solution {
public:
int dp[101][101];
int solve(vector<vector<int>>&m,int i,int j){

    if(i==m.size()-1 && j>=0 && j<=m.size()-1){
        return m[i][j];
    }
    if(dp[i][j]!=-1){

        return dp[i][j];
    }
    if(j==0){
        return dp[i][j]=m[i][j]+min(solve(m,i+1,j),solve(m,i+1,j+1));
    }
    if(j==m.size()-1){
        return dp[i][j]=m[i][j]+min(solve(m,i+1,j),solve(m,i+1,j-1));
    }
    
    
    return dp[i][j]=m[i][j]+min(solve(m,i+1,j-1),min(solve(m,i+1,j),solve(m,i+1,j+1)));
        
    
}
int minFallingPathSum(vector<vector<int>>& matrix) {
    int min1=INT_MAX;
    memset(dp,-1,sizeof(dp));
    for(int i=0;i<matrix[0].size();i++){
        memset(dp,-1,sizeof(dp));
        min1=min(min1,solve(matrix,0,i));
    }
    return min1;
}
};
