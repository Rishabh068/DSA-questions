string longestPalindrome(string s) {
        int n=s.length();
        string out="";
        if(n==1) return s;
	//Handling string if the length is equal to 2 
        if(n==2 && s[0]==s[1]) return s;
        else if(n==2){
            out+=s[0];
            return out;
        }
        int l,h,max=0;
        for(int i=1;i<s.length();i++)
        {
            //case 1
            l=i-1;h=i;
            if(s[l]==s[h])
            {
                while(l>=0&&h<s.length()&&s[l]==s[h])
                {
                    l--;h++;
                }
                l++;h--;
                if((h-l+1)>max)
                {
                    max=h-l+1;
                    out=s.substr(l,max);
                }
            }
            //case 2
            l=i-1;h=i+1;
            if(h<s.length()&&s[l]==s[h])
            {
                while(l>=0&&h<s.length()&&s[l]==s[h])
                {
                    l--;h++;
                }
                l++;h--;
                if((h-l+1)>max)
                {
                    max=h-l+1;
                    out=s.substr(l,max);
                }
            }
        }
	//if there is no palindromic substring greater than length 1 so we return substring of length 1
        if(max==0)
            out+=s[0];
        return out;
        
    }
